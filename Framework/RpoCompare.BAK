#Include "Totvs.ch"
#Include "parmtype.ch"

#Define RPO_A	1
#Define RPO_B	2


#Define RPO_ID				1
#Define RPO_FILE			2
#Define RPO_LANGUAGE		3
#Define RPO_BUILD			4
#Define RPO_DATA			5
#Define RPO_TIME			6

#Define RPO_LEN				6

#Define RPO_ARR_EMPTY		{0, "", "", "", CTOD("  /  /  "), "" }

#Define COMPARSION_RESULT_STATUS	{{0, "Igual Nos Dois RPO's"}, {1,"Mais Atual no RPO A"}, {2, "Mais Atual No RPO B"}, {3, "Não existe no RPO A"}, {4, "Não Existe no RPO B"} }


Class RpoCompare	From	LongClassName
	
	Data	oRpo_A
	Data	oRpo_B
	Data	nFilter
	Data	cClassName
	Data	aResult

	Method New(cPath_A, cPath_B,nFilter) Constructor
	
	Method GetObjById(nRpo,nId)
	Method GetObjByFile(nRpo,cFile)
	
	Method GetPosById(nRpo,nId)
	Method GetPosByFile(nRpo,cFile)
	
	Method Compare()

	Method	ClassName()

EndClass





Method New(cPath_A,cPath_B,nFilter) Class RpoCompare
	
	PARAMTYPE 0 Var cPath_A As CHARACTER
	PARAMTYPE 1 Var cPath_B As CHARACTER
	PARAMTYPE 2 Var nFilter As NUMERIC	OPTIONAL Default 0

	::cClassName	:=	"RpoCompare"
	::oRpo_A		:=	RpoObjects():New(cPath_A,nFilter)
	::oRpo_B		:=	RpoObjects():New(cPath_B,nFilter)

Return



Method	GetObjById(nRpo, nId)	Class RpoCompare

	
	Local nResult
	Local uResult

	PARAMTYPE 0 Var nRpo As NUMERIC
	PARAMTYPE 1 Var nId  As NUMERIC	
			
	Do Case 
		Case nRpo == RPO_A
			
			If !( nResult := ::GetPosById(nRpo, nId) ) > 0
				Return( RPO_ARR_EMPTY )
			Else
				uResult	:=	aClone(::oRpo_A:aObjects[nResult])
			EndIf

		Case nRpo == RPO_B
			
			If !( nResult := ::GetPosById(nRpo, nId) ) > 0
				Return( RPO_ARR_EMPTY )
			Else
				uResult	:=	aClone(::oRpo_B:aObjects[nResult])
			EndIf

		OtherWise
			UserException("The RPO ID "+cValToChar(nRpo)+" does not exists.")
	EndCase

Return(uResult)

Method	GetObjByFile(nRpo, cFile)	Class RpoCompare
	
	Local nResult
	Local uResult

	PARAMTYPE 0 Var nRpo 	As NUMERIC
	PARAMTYPE 1 Var cFile  	As CHARACTER	

	Do Case 
		Case nRpo == RPO_A
			
			If !( nResult := ::GetPosByFile(nRpo, cFile) ) > 0
				Return( RPO_ARR_EMPTY )
			Else
				uResult	:=	aClone(::oRpo_A:aObjects[nResult])
			EndIf

		Case nRpo == RPO_B
			
			If !( nResult := ::GetPosByFile(nRpo, cFile) ) > 0
				Return( RPO_ARR_EMPTY )
			Else
				uResult	:=	aClone(::oRpo_B:aObjects[nResult])
			EndIf

		OtherWise
			UserException("The RPO ID "+cValToChar(nRpo)+" does not exists.")
	EndCase

Return(uResult)


Method GetPosById(nRpo, nId)	Class RpoCompare
	Local nResult
	
	PARAMTYPE 0 Var nRpo 	As NUMERIC
	PARAMTYPE 1 Var nId  	As NUMERIC
	
	Do Case 
		Case nRpo == RPO_A
			
			nResult :=	aScan( ::oRpo_A:aObjects, {|x| x[RPO_ID] == nId} ) 

		Case nRpo == RPO_B
			
			nResult :=	aScan( ::oRpo_B:aObjects, {|x| x[RPO_ID] == nId} )

		OtherWise
			UserException("The RPO ID "+cValToChar(nRpo)+" does not exists.")
	EndCase
	
Return(nResult)



Method GetPosByFile(nRpo, cFile)	Class RpoCompare
	Local nResult
	
	PARAMTYPE 0 Var nRpo 	As NUMERIC
	PARAMTYPE 1 Var cFile  	As CHARACTER	
	
	Do Case 
		Case nRpo == RPO_A
			
			nResult :=	aScan( ::oRpo_A:aObjects, {|x| x[RPO_FILE] == cFile} ) 

		Case nRpo == RPO_B
			
			nResult :=	aScan( ::oRpo_B:aObjects, {|x| x[RPO_FILE] == cFile} )

		OtherWise
			UserException("The RPO ID "+cValToChar(nRpo)+" does not exists.")
	EndCase
	
Return(nResult)


Method	ClassName() Class RpoCompare
Return(::ClassName)


Method Compare() Class RpoCompare
	Local aAux_A
	Local aAux_B      
	
	Local aRpo_A		:=	aClone(::oRpo_B:aObjects)
	Local aRpo_B		:=	aClone(::oRpo_B:aObjects)

	Local cFile	 
	Local bValid	:=	{|File|  cFile := File, Iif( Len(::aResult) > 0 , ( aScan(::aResult, {|x| x[1] == cFile .Or. x[6] == cFile }) > 0) , .F.)  }
    Local bDel		:=	{|nPos, aData|	Iif( nPos > 0, (aDel(aData,nPos), aSize(aData, Len(aData)-1)), )    }
	
	::aResult	:=	{}

	aEval(aRpo_A, {|x| aAux_A := x ,Iif( Eval(bValid,aAux_A[RPO_FILE]),, ( aAux_B := ::GetObjByFile(RPO_B,aAux_A[RPO_FILE]),  aAdd( ::aResult, GetResultComp(aAux_A, aAux_B)), Eval(bDel,aScan(aRpo_B, {|x| x[RPO_FILE] == aAux_A[RPO_FILE]}), aRpo_B ) ) ) })				
	aEval(aRpo_B, {|x| aAux_B := x ,Iif( Eval(bValid,aAux_B[RPO_FILE]),, ( aAux_A := ::GetObjByFile(RPO_A,aAux_B[RPO_FILE]),  aAdd( ::aResult, GetResultComp(aAux_A, aAux_B)), Eval(bDel,aScan(aRpo_A, {|x| x[RPO_FILE] == aAux_B[RPO_FILE]}), aRpo_A ) ) ) })

Return


Static Function GetResultComp(aInfo_A, aInfo_B)
	Local aReturn
	Local nResult
	Local nPos	

		Do Case
			Case ! ( ArrDiff(aInfo_A, aInfo_B) )
				nResult	:=	0
			Case aInfo_A[RPO_DATA] > aInfo_B[RPO_DATA] .And. !Empty(aInfo_B[RPO_DATA])
				nResult	:=	1
			Case aInfo_A[RPO_TIME] > aInfo_B[RPO_TIME] .And. !Empty(aInfo_B[RPO_TIME])
				nResult	:=	1
			Case aInfo_B[RPO_DATA] > aInfo_A[RPO_DATA] .And. !Empty(aInfo_A[RPO_DATA])
				nResult	:=	2
			Case aInfo_B[RPO_TIME] > aInfo_A[RPO_TIME] .And. !Empty(aInfo_A[RPO_TIME])
				nResult	:=	2	
			Case aInfo_A[RPO_ID] == 0
				nResult	:=	3
			Case aInfo_B[RPO_ID] == 0
				nResult	:=	4
			OtherWise
				nResult	:=	0
		EndCase

		nPos	:=	aScan(COMPARSION_RESULT_STATUS, {|x| x[1] == nResult})

		aReturn :=	{	aInfo_A[RPO_FILE],; 
						aInfo_A[RPO_LANGUAGE],; 
						aInfo_A[RPO_BUILD],; 
						aInfo_A[RPO_DATA],; 
						aInfo_A[RPO_TIME],;
						aInfo_B[RPO_FILE],; 
						aInfo_B[RPO_LANGUAGE],; 
						aInfo_B[RPO_BUILD],; 
						aInfo_B[RPO_DATA],; 
						aInfo_B[RPO_TIME],;
						COMPARSION_RESULT_STATUS[nPos][2] }

Return(aClone(aReturn))